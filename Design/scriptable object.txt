scriptable object是一种可编程的asset，兼具程序和数据两种特性。
一个scriptable object可以包含若干的property，也可以包含method。
你可以在资源文件中直接实例化一个scriptable object，在inspector中修改它的property，
并且这个数值是不会随着游戏的重启、场景的切换而丢失的。

scriptable object的应用场景：
A1.物品系统。
如果游戏中有很多物品，它们都有一些共同的参数（例如武器有攻击力、价格、级别等等），
你可以写一个继承scriptable object的类（例如weapon），然后在资源文件中直接实例化，创建出一个个武器的asset。
这样的好处是，这个过程不是在代码运行时创建的，而是独立作为一个游戏资产，即使是不太熟悉代码的合作者也可以方便地进行编辑，避免了代码的改动，既节省了每次改动的编译时间，也更加方便安全。如果我想测试好几套参数，选择一套最合适的，我可以直接创建好几个asset，直接拖动到inspector中更换即可，而不必在代码中不停地注释掉暂时弃用的代码。

A2.技能和AI。
相对于物品系统，技能和AI更加复杂，因为它们不仅仅有基本参数，而且有更加个性化的逻辑。这同样可以通过scriptable object实现。例如你可以将AI作为一种插件式的asset，然后不管是什么敌人，都暴露出一个接口，可以接入这个AI，AI可以自动地适配并且控制宿主。这样AI逻辑就与宿主逻辑成功解耦。

B1.保存

B2.共享
一个scriptable object可以脱离对象单独存在，而且被多个脚本共享。
因此它最直接的一个好处就是优化了性能，对于拥有大量数据的prefab，每次实例化都需要开辟内存来存放其数值，
而大量克隆的prefab数值其实是一样的。用scriptable object就可以共享数值，减小内存开销。

此外它也适合作为事件处理的载体，用来接收信号，发送信号。
而相关的脚本需要做的，只不过是将它拖拽到自己的接口中。
